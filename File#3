Distributed Workflows
Unlike Centralized Version Control Systems (CVCSs), the distributed nature of Git allows you to be far more flexible in
how developers collaborate on projects. In centralized systems, every developer is a node working more or less equally
on a central hub. In Git, however, every developer is potentially both a node and a hub—that is, every developer can both
contribute code to other repositories and maintain a public repository on which others can base their work and which
they can contribute to. This opens a vast range of workflow possibilities for your project and/or your team, so we’ll cover
a few common paradigms that take advantage of this flexibility. We’ll go over the strengths and possible weaknesses of
each design; you can choose a single one to use, or you can mix and match features from each.
Centralized Workflow
In centralized systems, there is generally a single collaboration model—the centralized workflow. One central hub,
or repository, can accept code, and everyone synchronizes their work to it. A number of developers are nodes—
consumers of that hub—and synchronize to that one place. 
This means that if two developers clone from the hub and both make changes, the first developer to push their
changes back up can do so with no problems. The second developer must merge in the first one’s work before pushing
changes up, so as not to overwrite the first developer’s changes. This concept is as true in Git as it is in Subversion
(or any CVCS), and this model works perfectly well in Git.
If you are already comfortable with a centralized workflow in your company or team, you can easily continue
using that workflow with Git. Simply set up a single repository, and give everyone on your team push access; Git won’t
let users overwrite each other. Say John and Jessica both start working at the same time. John finishes his change and
pushes it to the server. Then Jessica tries to push her changes, but the server rejects them. She is told that she’s trying
to push non−fast-forward changes and that she won’t be able to do so until she fetches and merges. This workflow is
attractive to a lot of people because it’s a paradigm that many are familiar and comfortable with.
This is also not limited to small teams. With Git’s branching model, it’s possible for hundreds of developers to
successfully work on a single project through dozens of branches simultaneously.
Integration-Manager Workflow
Because Git allows you to have multiple remote repositories, it’s possible to have a workflow where each developer
has write access to their own public repository and read access to everyone else’s. This scenario often includes a
canonical repository that represents the “official” project. To contribute to that project, you create your own public
clone of the project and push your changes to it. Then, you can send a request to the maintainer of the main project to
pull in your changes. The maintainer can then add your repository as a remote, test your changes locally, merge them
into their branch, and push back to their repository. The process works as follows:
1. The project maintainer pushes to their public repository.
2. A contributor clones that repository and makes changes.
3. The contributor pushes to their own public copy.
4. The contributor sends the maintainer an e-mail asking them to pull changes.
5. The maintainer adds the contributor’s repo as a remote and merges locally.
6. The maintainer pushes merged changes to the main repository.
Dictator and Lieutenants Workflow
This is a variant of a multiple-repository workflow. It’s generally used by huge projects with hundreds of collaborators;
one famous example is the Linux kernel. Various integration managers are in charge of certain parts of the repository;
they’re called lieutenants. All the lieutenants have one integration manager known as the benevolent dictator.
The benevolent dictator’s repository serves as the reference repository from which all the collaborators need to pull.
The process works like this:
1. Regular developers work on their topic branch and rebase their work on top of master. The
master branch is that of the dictator.
2. Lieutenants merge the developers’ topic branches into their master branch.
3. The dictator merges the lieutenants’ master branches into the dictator’s master branch.
4. The dictator pushes their master to the reference repository so the other developers can
rebase on it.
Figure 5-3. Benevolent dictator workflow
This kind of workflow isn’t common, but can be useful in very big projects, or in highly hierarchical
environments. It allows the project leader (the dictator) to delegate much of the work and collect large subsets of code
at multiple points before integrating them.
Workflows Summary
These are some commonly used workflows that are possible with a distributed system like Git, but you can see that
many variations are possible to suit your particular real-world workflow. Now that you can (hopefully) determine
which workflow combination may work for you, we’ll cover some more specific examples of how to accomplish
the main roles that make up the different flows. In the next section, you’ll learn about a few common patterns for
contributing to a project.
